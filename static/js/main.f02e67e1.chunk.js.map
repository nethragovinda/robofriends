{"version":3,"sources":["components/card.js","components/cardlist.js","components/SearchBox.js","components/Scroll.js","container/App.js","reportWebVitals.js","index.js"],"names":["card","id","name","email","className","src","alt","cardlist","robots","map","robo","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","border","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MACrB,OACI,sBAAKC,UAAW,sDAAhB,UACI,qBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,gCACI,6BAAKJ,IACL,4BAAIC,WCeLI,EAnBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEf,OACI,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAQ,cAAC,EAAD,CAERV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,OAHVQ,SCIRC,EAbG,SAAC,GAClB,IADmBC,EACpB,EADoBA,aAEhB,OACI,qBAAKT,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACjBU,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCETI,G,MARA,SAACC,GACZ,OACI,qBAAKC,MAAS,CAACC,SAAU,SAAUC,OAAO,QAASC,OAAQ,mBAA3D,SACKJ,EAAMK,aCgDJC,E,kDA9CX,aAAc,IAAD,8BACT,gBAQJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SARxC,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAY,IAJP,E,qDAab,WAAoB,IAAD,OACfI,MAAM,8CACDC,MAAK,SAAAC,GACH,OAAOA,EAASC,UAElBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACnB,OAAO4B,S,oBAI5C,WAAS,IAAD,OACEC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAC5C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAGpE,OAAgC,IAA7BH,KAAKP,MAAMvB,OAAOmC,OAEV,oDAIH,sBAAKvC,UAAU,KAAf,UACI,6CACA,cAAC,EAAD,CAAWS,aAAcyB,KAAKb,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAQ6B,a,GAtCxBO,aCKHC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAOhDX,M","file":"static/js/main.f02e67e1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst card = ({id, name, email}) =>{\r\n    return(\r\n        <div className= 'tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './card';\r\n\r\n\r\nconst cardlist = ({robots}) =>{\r\n \r\n    return(\r\n        <div>\r\n          { \r\n            robots.map((robo,i) => {\r\n                return (<Card \r\n                key = {i}\r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}\r\n                />);\r\n            }\r\n            )\r\n          }     \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>\r\n{\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots'\r\n            onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style = {{overflow: 'scroll', height:'500px', border: '2px solid black' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/cardlist';\r\n//import { robots } from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'; \r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield:''\r\n        }\r\n        \r\n    }\r\n    \r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield:event.target.value});\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => {\r\n               return response.json();\r\n            })\r\n            .then(users=> this.setState({robots:users}));    \r\n            \r\n    }\r\n\r\n    render(){   \r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n\r\n        if(this.state.robots.length === 0)\r\n        {\r\n            return <h1>Robots are Loading</h1>;\r\n        }else {\r\n\r\n            return(\r\n                <div className='tc'>\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n       \r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App'\nimport 'tachyons'\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n                \n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}